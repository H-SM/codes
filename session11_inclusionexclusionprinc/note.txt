Set Theory 
 A={1,3,5,10,50}
 B={2,4,5,10,100,40}

 AuB= A+B-AnB 
    ={1,3,5,10,50,2,4,100,40}

now for 3 sets-
AuBuC 
A={2,4,6,8,10,12,14}, B={3,6,9,12,15}, C={5,10,15}

AnB={6,12}, AnC={10}, BnC={15}, AnBnC={'\o'}

AuBuC= A+B+C-AnB-AnC-BnC+AnBnC
     
AuBuCuD=A+B+C+D-AB-AC-AD-BC-BD-CD+ABC+ABD+CBD+ACD-ABCD <add odd, subtract even>

Problems->
q) find total number of permutations of[0-9] which contains 13,49,34,23.
 
    >ans
        13 and 49
        
        2343131249 

        13 and 34
        
        134 

        just contains both of the elements in it,just add all like in Set Theory and make the permutatons 
        out of them a->P13 B->P49 c->P34 D->P23 <do it as above <in Set Theory>>

q) Total numbers which are less than 500 and divisible by frist 3 prime numbers?

    >ans
        P={2,3,5}
        no. of elements in each divisible
        N2=500/2=250
        N3=500/3=166
        N5=500/5=100
        N23=500/6=83
        N25=500/10=50
        N35=500/15=33
        N235=500/30=18

        no. divisible by either of 2,3, and 5=> 250+166+100-83-50-33+18

If more done , liike first 10 prime numbers ...
so we code it 
###Nprime.cpp###

Section 12_prime numbers 

2 divisors
check prime 
2.........sqrt(n) will check for prime or not for n...

Prime Sieve Method o(n log log n)
<Seive of Eratosthenes>

Concept -> start with an array 
. could be at any range <N> 
. put numbers in the array 
. this algo picks a number and makes all its multiple as not prime <<<
. 1 ans 0 not prime by default 
. do this for all prime numbers 2,3,5,7,11........<only prime numbers left>
. only prime numbers remain. 
an Optimization we can do > start from p^2 and mark p^2 to N ... since before ones will already be marked by another prime number 
###Ref Seive of Eratosthenes.cpp###

Prime Queries 
number of primes in range a,b , give number of primes<<< in the range 
we have sieve ready ,after running prime seive o(n log log n)
we will make another array having cummulative product of number of prime numbers 
and take out the diffrence for that range 

csum[i]=csum[i-1]+1 if i is prime 
ans=csum[b]-csum[a-1]// number of primes in range a,b
###Ref primeQueries.cpp ###

Prime Factorization 
30=2 x 15 = 2 x 3 x 5
means bringing number into its prime factors <1 unique answer only is there>
30 / 2 = 15 / 3 = 5 / 5 = 0 
this is how we do it < 15 cant ber done by 2 then we go to 3 do %i ==0 until it doesnt or not reach 0 
72 / 2 = 36 / 2 = 18 / 2 = 9 / 3= 3 /3 =1 
this is the brute force method 
>>worst case is a prime number a big one too 
###ref primeFactorization.cpp ###
ref to other approaches to the problem too

Segmented Sieve 
generate all prime numbers between 2 given numbers 
n-m =>10^5 
cant use standard sieve ,  as it will take a lot of memory which wont be used in future
to reduce this we use Segmented Sieve

how-? 
in range (m,n)

array index 0=> m-m 
            n=> n-m 

mark all numbers which are not prime in n, m  range 
find one divisor of trait <= sqrt no. 
we use 2 x 10 ^5 
###Ref SegSieve.cpp###

